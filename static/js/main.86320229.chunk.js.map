{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["getRandomSentence","text","Math","floor","random","length","Character","value","hasFocus","done","error","className","clsx","App","useState","currentSentence","setCurrentSentence","focusChar","setFocusChar","setError","keyPresses","setKeyPresses","correctKeyPresses","setCorrectKeyPresses","useEffect","handleKeyPressed","e","console","log","code","key","current","preventDefault","document","addEventListener","removeEventListener","Array","prototype","map","call","char","idx","round","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"kOAWMA,EAAoB,WACtB,OAAOC,IAAKC,KAAKC,MAAMD,KAAKE,SAAWH,IAAKI,UA6EhD,IAAMC,EAAqC,SAAC,GAKrC,IAJHC,EAIE,EAJFA,MACAC,EAGE,EAHFA,SACAC,EAEE,EAFFA,KACAC,EACE,EADFA,MAEA,OACI,qBACIC,UAAWC,YACP,YACAH,GAAQ,OACRD,GAAY,QACZA,GAAYE,GAAS,SAL7B,SAQKH,KAKEM,EA9Ff,WAAgB,IAAD,EACmCC,mBAASd,KAD5C,mBACJe,EADI,KACaC,EADb,OAEuBF,mBAAS,GAFhC,mBAEJG,EAFI,KAEOC,EAFP,OAGeJ,oBAAS,GAHxB,mBAGJJ,EAHI,KAGGS,EAHH,OAIyBL,mBAAS,GAJlC,mBAIJM,EAJI,KAIQC,EAJR,OAKuCP,mBAAS,GALhD,mBAKJQ,EALI,KAKeC,EALf,KA4CX,OA9BAC,qBAAU,WACN,IAAMC,EAAmB,SAACC,GAEtB,GADAC,QAAQC,IAAIF,GAEG,QAAXA,EAAEG,MACS,WAAXH,EAAEG,MACS,aAAXH,EAAEG,MACQ,UAAVH,EAAEI,IAON,OAHAT,GAAc,SAACU,GAAD,OAAaA,EAAU,KAEtB,UAAXL,EAAEG,MAAkBH,EAAEM,iBACtBf,IAAcF,EAAgBV,OAAS,GApB/CW,EAAmBhB,KACnBkB,EAAa,GACbG,EAAc,QACdE,EAAqB,IAoBbG,EAAEI,MAAQf,EAAgBE,IAC1BE,GAAS,GACTI,GAAqB,SAACQ,GAAD,OAAaA,EAAU,KACrCb,GAAa,SAACa,GAAD,OAAaA,EAAU,WAE/CZ,GAAS,IAIb,OADAc,SAASC,iBAAiB,UAAWT,GAC9B,kBAAMQ,SAASE,oBAAoB,UAAWV,MACtD,CAACR,IAIA,sBAAKN,UAAU,MAAf,UACI,qBAAKA,UAAU,eAAf,SACKyB,MAAMC,UAAUC,IAAIC,KAAKxB,GAAiB,SAACyB,EAAMC,GAAP,OACvC,cAAC,EAAD,CAEIlC,MAAOiC,EACP/B,KAAMgC,EAAMxB,EACZT,SAAUiC,IAAQxB,EAClBP,MAAOA,GAJF+B,QAQjB,sBAAK9B,UAAU,aAAf,UACKS,EAAa,EACRlB,KAAKwC,MAAO,IAAMpB,EAAqBF,GACvC,IAHV,WC1DGuB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJrB,SAASsB,eAAe,SAM5BZ,K","file":"static/js/main.86320229.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport './styles/App.scss'\nimport { data as text } from './asstets/textData.sv.json'\nimport clsx from 'clsx'\n\n/*\nTODO:\n- Timer with wpm\n- Change language\n*/\n\nconst getRandomSentence = () => {\n    return text[Math.floor(Math.random() * text.length)]\n}\n\nfunction App() {\n    const [currentSentence, setCurrentSentence] = useState(getRandomSentence())\n    const [focusChar, setFocusChar] = useState(0)\n    const [error, setError] = useState(false)\n    const [keyPresses, setKeyPresses] = useState(0)\n    const [correctKeyPresses, setCorrectKeyPresses] = useState(0)\n\n    const handleResetAll = () => {\n        setCurrentSentence(getRandomSentence())\n        setFocusChar(0)\n        setKeyPresses(0)\n        setCorrectKeyPresses(0)\n    }\n\n    useEffect(() => {\n        const handleKeyPressed = (e: KeyboardEvent) => {\n            console.log(e)\n            if (\n                e.code === 'Tab' ||\n                e.code === 'Escape' ||\n                e.code === 'CapsLock' ||\n                e.key === 'Shift'\n            )\n                return\n\n            setKeyPresses((current) => current + 1)\n\n            if (e.code === 'Space') e.preventDefault()\n            if (focusChar === currentSentence.length - 1) {\n                return handleResetAll()\n            }\n            if (e.key === currentSentence[focusChar]) {\n                setError(false)\n                setCorrectKeyPresses((current) => current + 1)\n                return setFocusChar((current) => current + 1)\n            }\n            setError(true)\n        }\n\n        document.addEventListener('keydown', handleKeyPressed)\n        return () => document.removeEventListener('keydown', handleKeyPressed)\n    }, [focusChar])\n\n    const handleTextInput = (e: React.ChangeEvent<HTMLInputElement>) => {}\n    return (\n        <div className='App'>\n            <div className='text-wrapper'>\n                {Array.prototype.map.call(currentSentence, (char, idx) => (\n                    <Character\n                        key={idx}\n                        value={char}\n                        done={idx < focusChar}\n                        hasFocus={idx === focusChar}\n                        error={error}\n                    />\n                ))}\n            </div>\n            <div className='statistics'>\n                {keyPresses > 0\n                    ? Math.round((100 * correctKeyPresses) / keyPresses)\n                    : 100}\n                %\n            </div>\n        </div>\n    )\n}\n\ninterface CharacterType {\n    value: string\n    hasFocus: boolean\n    done: boolean\n    error: boolean\n}\n\nconst Character: React.FC<CharacterType> = ({\n    value,\n    hasFocus,\n    done,\n    error,\n}) => {\n    return (\n        <div\n            className={clsx(\n                'character',\n                done && 'done',\n                hasFocus && 'focus',\n                hasFocus && error && 'error'\n            )}\n        >\n            {value}\n        </div>\n    )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}